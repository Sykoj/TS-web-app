@page
@using Services
@using Ts.App.Model
@using Ts.App.Pages.Tableau
@model Ts.App.Pages.Tableau.SolutionViewModel
@{
    ViewData["Title"] = "SolutionView";
}

<style>
    .center {
        margin: auto;
        width: 50%;
    }
</style>

    <table class="center" style="border:1px solid">
        <tr>
            <th style="min-width:200px"><div class="center"><b>Formula</b></div></th>
            <th style="width:200px"><div class="center"><b>Truth label</b></div></th>
        </tr>
        @foreach (var formula in Model.AppSolutionRequest.TableauSolution.TableauInput.GetAllNodes()) {
            <tr>
                <td><div class="center">@Html.Encode(FormulaRawInputView.GetFormulaView(formula.Formula))</div></td>
                <td><div class="center">@Html.Encode(formula.TruthLabel)</div></td>
            </tr>
        }
    </table>

    <div style="text-align:center">
        <!-- Solution view components -->
        @if (Model.ViewType == SolutionViewType.Text) {
            @await Component.InvokeAsync("Text", Model.AppSolutionRequest.TableauSolution.SolutionNode)
        }
        @if (Model.ViewType == SolutionViewType.Svg) {
            @await Component.InvokeAsync("Svg", Model.AppSolutionRequest.TableauSolution.SolutionNode)
        }
    </div>

    @if (Model.AppSolutionRequest.ExpectedTableauType != TableauType.Default) {
    <div class="center">

        <p>Expected result: @Html.DisplayFor(m => m.AppSolutionRequest.ExpectedTableauType)</p>
        <p>Current result: @Html.DisplayFor(m => m.AppSolutionRequest.TableauType)</p>
    </div>
    }
